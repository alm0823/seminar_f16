\documentclass[11pt]{article}
\usepackage{fullpage,graphicx,float,amsmath,enumitem,hyperref}
\setlist{parsep=5.5pt}
\setlength{\parindent}{0pt}
\setlength{\parskip}{\baselineskip}

\usepackage{fancyhdr}
\pagestyle{fancy}
\lhead{Missing Data and LOD}
\rhead{Paul Harmon, Nnamdi Ezike, and Andrea Mack}
\setlength{\headheight}{18pt}
\setlength{\headsep}{2pt}

\title{Pea Lodging Final Report For Jamin Smitchger}
\author{Paul Harmon, Nnamdi Ezike, and Andrea Mack}
\date{December 16, 2016}

\begin{document}
\maketitle

<<setup, echo = FALSE, message = FALSE, cache = FALSE>>=
library(knitr)
opts_chunk$set(echo = FALSE, comment = NA, fig.align = "center",
               fig.width = 6.5, fig.height = 4, fig.pos = "H",
               size = "footnotesize", dev = "pdf",
               dev.args = list(pointsize = 11))
knit_theme$set("print")

library(xtable)
options(xtable.table.placement = "H", xtable.caption.placement = "top",
        width = 80, scipen = 1, show.signif.stars = FALSE)

library(TSA)
library(qtl)
library(mice)
library(ggplot2)
library(reshape2)

@

<<readin, include = FALSE>>=
# this data was extracted from the file
#Copy of MapDisto LOD 4, R=.15 with imputed and hets and distorteds remove-map written
# that was sent 112116 from Jamin -- see email

# gen_export is what map disto gave when I exported the data
# it is in an odd format that I don't know how to work with
setwd("C:/Users/Paul/Documents/seminar_f16/final_report") #sets wd
gen_export <- read.table("datafromdisto_sent112116.txt", fill = TRUE)
str(gen_export)

# gen is what I copied directly from map disto
gen.raw <- read.csv("raw_copied.csv", as.is = TRUE)
gen <- read.csv("gen.csv", as.is = TRUE)
dim(gen)

###################################################################
# below was used to create data set
###################################################################
# make ind x markers
#gen <- t(gen)
#dim(gen)
# make row1 the column names
#colnames(gen) <- c(gen[1,])
# delete first row that was genetic marker identifiers
#gen <- gen[-1,]
#dim(gen)
#str(gen)
#write.csvs(gen, file = "gen.csv")
#gen <- apply(gen, 2, function(t){as.factor(as.character(t))})

#####################################################################

gen[gen == "-"] <- NA
gen <- apply(gen,2,function(t){factor(t,levels = c("A", "B"))})
gen <- data.frame(gen)

# converting data to long form for ggplot2 use

gen$ind <- c(seq(1:257))
gen$ind <- as.factor(as.character(gen$ind))

colnames(gen) <- substring(colnames(gen),1,7)

datf1_bz16 <- melt(gen, id.var = 'ind', na.rm = FALSE)
datf1_bz16[is.na(datf1_bz16)] <- "missing"
@

\section{Visualizing Missing Data}
Tables and plots are provided below to visualize and quantify the amount of missing data at each genetic marker and across each variety genotyped. The plots and tables are to help Jamin understand the quality of his data.
\subsection{All Markers}

<<missing.plot, caption = "Missing Genetic Data Plot", cache=TRUE>>=

ggplot(datf1_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
   colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
                                            guide = guide_legend(title = "") ) + 
  ggtitle("Genetic Data") +
 xlab("Genetic Marker") + ylab("Variety") +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 90, hjust = 1, size = 0.5), 
        axis.text.y = element_text(angle = 90, hjust = 1, size = 0.5))
@

<<missing.pattern, include = FALSE>>=
#str(md.pattern(gen))
colnames(gen)

gen_markers <- gen[,-c(1,611)]
dim(gen_markers)
marker_miss <- apply(gen_markers,2,function(t){length(which(is.na(t) == TRUE))})
variety_miss <- apply(gen_markers,1,function(t){length(which(is.na(t) == TRUE))})

marker_miss
marker_miss.percent <- marker_miss/dim(gen_markers)[2]
variety_miss.percent <- variety_miss/dim(gen_markers)[1]

mmiss <- data.frame(rbind(marker_miss, marker_miss.percent))
rownames(mmiss) <- c("Count", "Percent")

vmiss <- data.frame(rbind(variety_miss, variety_miss.percent))
rownames(vmiss) <- c("Count", "Percent")
@

<<xtable.misses, results = 'asis'>>=

print(xtable(mmiss[,1:20]), scale = 0.5)
print(xtable(mmiss[,21:40]), scale = 0.5)
print(xtable(mmiss[,41:60]), scale = 0.5)
print(xtable(mmiss[,61:80]), scale = 0.5)
print(xtable(mmiss[,81:100]), scale = 0.5)
print(xtable(mmiss[,101:120]), scale = 0.5)
print(xtable(mmiss[,121:140]), scale = 0.5)
print(xtable(mmiss[,141:160]), scale = 0.5)
print(xtable(mmiss[,161:180]), scale = 0.5)
print(xtable(mmiss[,181:200]), scale = 0.5)
print(xtable(mmiss[,201:220]), scale = 0.5)
print(xtable(mmiss[,221:240]), scale = 0.5)
print(xtable(mmiss[,241:260]), scale = 0.5)
print(xtable(mmiss[,261:280]), scale = 0.5)
print(xtable(mmiss[,281:300]), scale = 0.5)
print(xtable(mmiss[,301:320]), scale = 0.5)
print(xtable(mmiss[,321:340]), scale = 0.5)
print(xtable(mmiss[,341:360]), scale = 0.5)
print(xtable(mmiss[,361:380]), scale = 0.5)
print(xtable(mmiss[,381:400]), scale = 0.5)
print(xtable(mmiss[,401:420]), scale = 0.5)
print(xtable(mmiss[,421:440]), scale = 0.5)
print(xtable(mmiss[,441:460]), scale = 0.5)
print(xtable(mmiss[,461:480]), scale = 0.5)
print(xtable(mmiss[,481:500]), scale = 0.5)
print(xtable(mmiss[,501:520]), scale = 0.5)
print(xtable(mmiss[,521:540]), scale = 0.5)
print(xtable(mmiss[,541:560]), scale = 0.5)
print(xtable(mmiss[,561:580]), scale = 0.5)
print(xtable(mmiss[,581:600]), scale = 0.5)
print(xtable(mmiss[,601:609]), scale = 0.5)



print(xtable(vmiss[,1:20]), scale = 0.5)
print(xtable(vmiss[,21:40]), scale = 0.5)
print(xtable(vmiss[,41:60]), scale = 0.5)
print(xtable(vmiss[,61:80]), scale = 0.5)
print(xtable(vmiss[,81:100]), scale = 0.5)
print(xtable(vmiss[,101:120]), scale = 0.5)
print(xtable(vmiss[,121:140]), scale = 0.5)
print(xtable(vmiss[,141:160]), scale = 0.5)
print(xtable(vmiss[,161:180]), scale = 0.5)
print(xtable(vmiss[,181:200]), scale = 0.5)
print(xtable(vmiss[,201:220]), scale = 0.5)
print(xtable(vmiss[,221:240]), scale = 0.5)
print(xtable(vmiss[,241:257]), scale = 0.5)






## read in phenotypic data
## i need to figure out which phenotypic data correponds to what's in gen
#moc1516 <- read.csv("Final Data Files-lodging files 10-13-2016-2015moc.csv")#257 rows


# make a cross object
# the cross object function assumes markers are in the correct order


## next, subset by highest non - missing rate and remake plot
@

\subsection{Less than 25\% Missing}

<<subset.25, warning = FALSE>>=
mmiss25 <- which(mmiss[2,] <= 0.25)
mmiss30 <- which(0.25 < mmiss[2,] & mmiss[2,]<= 0.30)

mmiss35 <- which(0.30 < mmiss[2,] & mmiss[2,]<= 0.35)
mmiss40 <- which(0.35 < mmiss[2,] & mmiss[2,]<= 0.40)
mmiss45 <- which(0.40 < mmiss[2,] & mmiss[2,]<= 0.45)
mmiss50 <- which(0.45 < mmiss[2,] & mmiss[2,]<= 0.50)


#mmiss.all <- c(mmiss25,mmiss50,mmiss75,mmiss100)
#good
#mmiss.all %in% c(seq(1:610))
#colnames(gen[,2:610])

dat25_bz16 <- melt(gen[,c(mmiss25,611)], id.var = 'ind', na.rm = FALSE)
dat25_bz16$value <- factor(dat25_bz16$value, levels = c("A","B","missing"))
dat25_bz16[is.na(dat25_bz16)] <- "missing"

dat30_bz16 <- melt(gen[,c(mmiss30,611)], id.var = 'ind', na.rm = FALSE)
dat30_bz16$value <- factor(dat30_bz16$value, levels = c("A","B","missing"))
dat30_bz16[is.na(dat30_bz16)] <- "missing"


dat35_bz16 <- melt(gen[,c(mmiss35,611)], id.var = 'ind', na.rm = FALSE)
dat35_bz16$value <- factor(dat35_bz16$value, levels = c("A","B","missing"))
dat35_bz16[is.na(dat35_bz16)] <- "missing"

dat40_bz16 <- melt(gen[,c(mmiss40,611)], id.var = 'ind', na.rm = FALSE)
dat40_bz16$value <- factor(dat40_bz16$value, levels = c("A","B","missing"))
dat40_bz16[is.na(dat40_bz16)] <- "missing"

dat45_bz16 <- melt(gen[,c(mmiss45,611)], id.var = 'ind', na.rm = FALSE)
dat45_bz16$value <- factor(dat45_bz16$value, levels = c("A","B","missing"))
dat45_bz16[is.na(dat45_bz16)] <- "missing"

dat50_bz16 <- melt(gen[,c(mmiss50,611)], id.var = 'ind', na.rm = FALSE)
dat50_bz16$value <- factor(dat50_bz16$value, levels = c("A","B","missing"))
dat50_bz16[is.na(dat50_bz16)] <- "missing"
@


<<missing.plot25, cache=TRUE, fig.height=7.5, warning=FALSE>>=

ggplot(dat25_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
   colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
                                            guide = guide_legend(title = "") ) + 
  ggtitle("Genetic Data < 25% Missing") +
 xlab("Genetic Marker") + ylab("Variety") +
  theme(legend.position = "bottom", legend.title = element_text(""),
        axis.text.x = element_text(angle = 90, hjust = 1, size = 10), 
        axis.text.y = element_text(angle = 0, hjust = 1, size = 10))
@

\subsection{Less than 30\% Missing}

<<missing.plot30, cache=TRUE,fig.height=8, warning = FALSE>>=

ggplot(dat30_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
   colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
                                            guide = guide_legend(title = "") ) + 
  ggtitle("Genetic Data 25 % < 30% Missing") +
 xlab("Genetic Marker") + ylab("Variety") +
  theme(legend.position = "bottom", legend.title = element_text(""),
        axis.text.x = element_text(angle = 90, hjust = 1, size = 1), 
        axis.text.y = element_text(angle = 0, hjust = 1, size = 1))
@

\subsection{Less than 35\% Missing}


<<missing.plot35, cache=TRUE, fig.height=8, warning = FALSE, message = FALSE>>=

ggplot(dat35_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
   colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
                                            guide = guide_legend(title = "") ) + 
  ggtitle("Genetic Data 30 % < 35% Missing") +
 xlab("Genetic Marker") + ylab("Variety") +
  theme(legend.position = "bottom", legend.title = element_text(""),
        axis.text.x = element_text(angle = 90, hjust = 1, size = 1), 
        axis.text.y = element_text(angle = 90, hjust = 1, size = 1))
@

\subsection{Less than 40\% Missing}


<<missing.plot40, cache=TRUE, fig.height=8, warning = FALSE, message = FALSE>>=

ggplot(dat40_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
   colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
                                            guide = guide_legend(title = "") ) + 
  ggtitle("Genetic Data 35 % < 40% Missing") +
 xlab("Genetic Marker") + ylab("Variety") +
  theme(legend.position = "bottom", legend.title = element_text(""),
        axis.text.x = element_text(angle = 90, hjust = 1, size = 1), 
        axis.text.y = element_text(angle = 90, hjust = 1, size = 1))
@

<<missing.plot45, cache=TRUE,fig.height=8, include = FALSE>>=

ggplot(dat45_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
   colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
                                            guide = guide_legend(title = "") ) + 
  ggtitle("Genetic Data 40 % < 45% Missing") +
 xlab("Genetic Marker") + ylab("Variety") +
  theme(legend.position = "bottom", legend.title = element_text(""),
        axis.text.x = element_text(angle = 90, hjust = 1, size = 1), 
        axis.text.y = element_text(angle = 90, hjust = 1, size = 1))
@

<<missing.plot50, cache=TRUE, fig.height=8, include = FALSE>>=

ggplot(dat50_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
   colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
                                            guide = guide_legend(title = "") ) + 
  ggtitle("Genetic Data 45 % < 50% Missing") +
 xlab("Genetic Marker") + ylab("Variety") +
  theme(legend.position = "bottom", legend.title = element_text(""),
        axis.text.x = element_text(angle = 90, hjust = 1, size = 1), 
        axis.text.y = element_text(angle = 90, hjust = 1, size = 1))
@



\section{Missing-ness}

<<miss7,include=FALSE, eval = FALSE>>=
setwd("C:/Users/Andrea Mack/Desktop/mack_hub/course_work/Consulting Seminar/seminar_f16/datasent102516")

#start with bz16
phen_bz16 <- read.csv("Final Data Files-lodging files 10-13-2016-2015bz.csv")
str(phen_bz16)
dim(phen_bz16)

rownames(gen)
phen_bz16[phen_bz16 == "-"] <- NA
summary(phen_bz16)

#heatmap(gen)
@


\section{Site Year Combinations for Lodging}


<<siteyear, include = TRUE, eval = TRUE, warning = FALSE>>=
setwd("C:/Users/Paul/Documents")
bz13 <- read.csv("JaminB13.csv", header = TRUE)
bz14 <- read.csv("JaminB14.csv", header = TRUE)
bz15 <- read.csv("JaminB15edited.csv", header = TRUE)
bz16 <- read.csv("JaminB16edited.csv", header = TRUE)
moc15 <- read.csv("JaminM15edited.csv", header = TRUE)
moc16 <- read.csv("JaminM16edited.csv", header = TRUE)

#create and add in variables for each site/year combination
bz13$Site <- bz14$Site <- bz15$Site <- bz16$Site <- "Bozeman"
moc15$Site <- moc16$Site <- "Moccasin"
bz13$Year <- 2013
bz14$Year <- 2014
bz15$Year <- moc15$Year <- 2015
bz16$Year <- moc16$Year <- 2016

#Merge into a single dataset
#lodging response
lodging<- c(bz14$Prcnt.Lodging,bz15$X..Lodging,bz16$X..Lodging.boze.2016,moc15$Lodging,moc16$X.lodging.2016)
#site year combo as a factor
site <- c(bz14$Site,bz15$Site, bz16$Site,moc15$Site,moc16$Site)
year <- c(bz14$Year, bz15$Year,bz16$Year,moc15$Year,moc16$Year)
siteyear <- as.factor(paste(site,year, sep = ""))

year.site.mat <- matrix(cbind(lodging,site,year,siteyear))
@

\subsection{Exploratory Analysis} 
The data were collected over a period of 4 field seasons at sites in Bozeman and 2 field seasons in Moccasin. Phenotypic data were analyzed in order to determine whether conditions were similar enough at each year/site combination to consider as a single dataset, or if they differ by enough that the sites and years need to be considered as different groups.  
Because lodging is considered the response of interest, we examine the Percent Lodging measured at each site/year combination. Note that Percent Lodging is not measured in the 2013 Bozeman data; we did not include it in this analysis. Given the result of the analysis, we do not need to consider it into the analysis to determine that there are differences in the year/site combinations.  Visually, we can plot the mean percent lodging at each year/site combination to get an idea of differences between the years and sites. Below, we have percent lodging at each site. It appears that the Moccasin sites tend to be slightly less variable; moreover, the median percent lodging at each site appeared to be higher in 2015 than in 2016.

<<meanvars, include = TRUE, eval = TRUE, warning = FALSE>>=
#plots of percent lodging at each site #means
a <- mean(bz14$Prcnt.Lodging, na.rm = TRUE)
b <- mean(bz15$X..Lodging, na.rm = TRUE)  
c <-mean(bz16$X..Lodging.boze.2016, na.rm = TRUE)  
d <- mean(moc15$Lodging, na.rm = TRUE) 
e <- mean(moc16$X.lodging.2016, na.rm = TRUE) 

#var
a.var <- var(bz14$Prcnt.Lodging, na.rm = TRUE)
b.var <- var(bz15$X..Lodging, na.rm = TRUE)  
c.var <-var(bz16$X..Lodging.boze.2016, na.rm = TRUE)  
d.var <- var(moc15$Lodging, na.rm = TRUE) 
e.var <- var(moc16$X.lodging.2016, na.rm = TRUE) 

#Box Plots (Side by Side)
boxplot(lodging~siteyear, cex = .8, col = c("tomato2","tomato2","tomato2","blue","blue"), main = "Lodging at each site/year combination", ylab = "Percent Lodging")
@


\subsection{Interaction Plot}
If the sites are reasonably similar, we would expect to see parallel lines that are either overlapping or very near each other.  The red line for Bozeman indicates that average percent lodging was higher in Bozeman than in Moccasin in both 2015 and 2016; however it may also have been more variable than in Moccasin. While the blue line and red line are both decreasing from 2015 to 2016, the difference in slopes indicates that there may be some interaction between year/site combinations.  More formal testing is necessary to assess differences between year and site combinations, but this visualization indicates some evidence of a difference in lodging in each location and year.

<<interactionplot, include = TRUE, eval = TRUE>>=
plot(seq(2014,2016,by = 1),c(a,b,c), type = "l", ylim = c(30,45),xaxt = 'n', main = "Interaction Plot", col = "tomato2", lwd = 2, xlab = "Year", ylab = "Mean Percent Lodging") 
axis(side=1,at = c(2014,2015,2016),labels = TRUE)
lines(x = c(2015,2016), y = c(d,e), type = "l", col = "blue", lwd = 2)
legend('topright', fill = c("tomato2","blue"), legend = c("Bozeman", "Moccasin"))
@

\subsection{Regression Model}
  The regression treats Bozeman 2014 as the baseline (intercept) group. Each site-year combination is tested against the   baseline; small p-values indicate that the given group differs from the baseline. The p-values for each of the other site-year combinations are all quite small – the largest, for Bozeman 2015, is only 0.015, indicating strong evidence that each of the site/year combinations differ from the baseline. Moreover, the effect size ranges from 4 to 7 points on the 1-100 percent scale on which Percent Lodging is measured.  The confidence intervals given give estimates of the true mean lodging at each site/year combination. If all the intervals overlapped, we might have evidence that the combinations are at least reasonably similar; however, the 2016 interval in Moccasin and the 2014/2015 Bozeman intervals do not overlap. 

<<regression, include = FALSE, eval = TRUE, warning = FALSE, message = FALSE>>=
#Fit A Simple Regression:
library(pander)
lm.lodging <- lm(lodging ~ siteyear, data = as.data.frame(year.site.mat))
summary(lm.lodging)
b14mean <- c(0,rep(lm.lodging$coef[1],4))
con <- confint(lm.lodging) 
confint.table <-  con + b14mean 
@

<<tables, include = TRUE, warning = FALSE, message = FALSE>>=
#display table of results
print(pandoc.table(lm.lodging))
print(pandoc.table(confint.table))
@
\subsection{Conclusion}
This analysis indicates that the measurements taken at each site in each year should be treated separately; they should not be considered homogenous enough to be taken as a single group.  The inclusion of 2013 into the data is unlikely to change the results of this study because the differences between the combinations already considered are enough to justify splitting the dataset into separate groups. 

\section{Correlation Plots}
Correlation describes the strength and direction of a linear association. Specifically, this analyis examines Pearson Correlations because the varibles are measured on a quantiative scale.  The strength of the linear association between variables is measured on a scale between -1 (a perfect negative association) and 1 (a perfect positive association). Correlation does not imply causal relationships. In examining, for instance, the relationship between lodging and stem width, the pearson correlation would only give information about the linear association between the two variables.  Indeed, even a strong association between the two variables cannot be interpreted that stem width causes lodging; rather, we would simply say that the two variables are associated with each other.  Since the phenotypes in each year at each site are considered seperate response values, we consider fitting correlation plots for each site/year combination. 

\subsection{Sites and Years Combined}

The correlation between pairwise explanatory variables of the phenotypic data were assessed using the a pairwise correlation matrix. We assessed the pairwise correlations across sites for pairs of explanatory variables which were measured within these sites at least in two different years.

The pairwise correlation matrix below shows that germination which was measured in Bozeman for all 3 years has weak correlation against all the variables measured. Also results from Bozeman shows that tendril length node of the plant was moderately to strongly correlated with the average length and tendril length of the plant with correlation coefficients of 0.61 and 0.48 respectively. The branch number and tiller diameter of the plant were also moderately correlated (r = 0.47). The maturity time of the plant was strongly and moderately correlated with the maximum nodes (r=0.65) and nodes of 1st flow (r=0.48). In addition, a correlation coefficient of 0.81 was observed for nodes 1st flow and maximum nodes of the plants.

In Moccasin, only four variables were observed to have been measured both in 2015 and 2016. Of these variables, the length and main stem diameter of the plants are moderately correlated (r=-0.55). Also, the main stem diameter and root diameter of the plants are moderately correlated (r=0.45).

<<merged, warning = FALSE, message = FALSE>>=
##Load Data (Bozeman 2014)
setwd("C:/Users/Paul/Documents")
mergedbzn<-read.csv("Merged Bozeman.csv",header=T)
#summary(mergedbzn)
#names(mergedbzn)

##Relabeling COlumns

library(data.table)

colnames(mergedbzn)[colnames(mergedbzn)=="Prcnt.Lodging"] <- "prcnt_lodging"
colnames(mergedbzn)[colnames(mergedbzn)=="Germination.2014.."] <- "gemination"
colnames(mergedbzn)[colnames(mergedbzn)=="branch.numb.2014"] <- "branch_numb"
colnames(mergedbzn)[colnames(mergedbzn)=="Height"] <- "plant_height"
colnames(mergedbzn)[colnames(mergedbzn)=="length"] <- "plant_length"
colnames(mergedbzn)[colnames(mergedbzn)=="tendril.length.14.node.2014"] <- "tendril_length_node"
colnames(mergedbzn)[colnames(mergedbzn)=="tendril.length.2014"] <- "tendril_length"
colnames(mergedbzn)[colnames(mergedbzn)=="Nodes.1st.flow.2014"] <- "nodes_1st_flow"
colnames(mergedbzn)[colnames(mergedbzn)=="max.nodes.2014"] <- "max_nodes"
colnames(mergedbzn)[colnames(mergedbzn)=="internode.length.2014"] <- "internode_length"
colnames(mergedbzn)[colnames(mergedbzn)=="Total.yield.2014"] <- "total_yield"
colnames(mergedbzn)[colnames(mergedbzn)=="Avg.Yld.Plant.2014"] <- "avg_total_yield"
colnames(mergedbzn)[colnames(mergedbzn)=="Main.stm.diameter.2014"] <- "main_stm_diam"
colnames(mergedbzn)[colnames(mergedbzn)=="Average.compressed.main.stem.thickness.2014"] <- "comp_main_stm"
colnames(mergedbzn)[colnames(mergedbzn)=="Tiller.diameter.2014"] <- "tiller_diam"
colnames(mergedbzn)[colnames(mergedbzn)=="compressed.tiller.thickness.2014"] <- "comp_tiller_diam"
colnames(mergedbzn)[colnames(mergedbzn)=="length.1"] <- "length_1"
colnames(mergedbzn)[colnames(mergedbzn)=="Maturity.Time"] <- "mat_time"
colnames(mergedbzn)[colnames(mergedbzn)=="Tendril.Width"] <- "tendril_Width"
colnames(mergedbzn)[colnames(mergedbzn)=="Root.compressed.avg"] <- "root_comp"
colnames(mergedbzn)[colnames(mergedbzn)=="avg.main..side.brnch.root"] <- "main_stm_branch"

#names(mergedbzn)

##Drop Columns

mergedbzn <- subset(mergedbzn, select = -c(Year,DNA.GENERATION, LINE.., Germination.2014NACHECKED, 
                                           stand.good.1.Y..2.bad.sample..do.not.use.lines.labeled.2, 
                                           prcnt.lodging.bad.germ.lines.includedNAchecked, flowering.time.2014,
                                           white.flower..1.is.white, black.hilum.delta.A.NO.MOT, 
                                           Brown.mottle..rerate.next.year..1.no.mot, np.neo, Late,
                                           tall.dwf.based.on.grnhouse.data..field.2014, Afila.1.YES.DELTA.A,
                                           internode_length, total_yield, comp_main_stm, length_1,
                                           tendril_Width, root_comp, main_stm_branch))


#names(mergedbzn)

##Reorder Colums
mergedbzn = mergedbzn[, c(5:6, 1:4, 7:14)]
#names(mergedbzn)

##Plot Correlation
#install.packages("psych")
require(psych)
pairs.panels(mergedbzn)
@

\subsection{Bozeman by Year}
We assessed the pairwise correlation of the different sites each year. In 2014, twelve pairs of explanatory variables had correlation coefficients between 0.42 and 0.91. The pairwise correlations are shown in the matrix below. Germination and total yield was strongly correlated (r=0.66) while the length and internode length of the plants recorded a very high correlation coefficient (r=0.91). In 2015 and 2016, of the pairwise combinations assessed, 28 combinations yielded correlation coefficients between 0.40 and 0.85. The results are presented in the pairwise correlation matrices below.

<<bz, warning = FALSE, message = FALSE>>=
##########################
# Bozeman 2016 Dataset  #
#########################

##Load Data (Bozeman 2016)
bozeman16<-bz16
#summary(bozeman16)

##Relabel Names
#names(bozeman16)

library(data.table)

##Relabeling COlumns
colnames(bozeman16)[colnames(bozeman16)=="pctg_Lodging_boze_2016"] <- "prcnt_lodging"
colnames(bozeman16)[colnames(bozeman16)=="GerminateNABozemanNA2016"] <- "germination"
colnames(bozeman16)[colnames(bozeman16)=="Avg_brnch_numb_boz_2016"] <- "branch_numb"
colnames(bozeman16)[colnames(bozeman16)=="avg_height_boze_2016"] <- "avg_plant_height"
colnames(bozeman16)[colnames(bozeman16)=="avg_length_boze_2016"] <- "avg_plant_length"
colnames(bozeman16)[colnames(bozeman16)=="Mat_time_boze_2016"] <- "maturity_time"
colnames(bozeman16)[colnames(bozeman16)=="avg_tend_length_boze_2016"] <- "tendril_length"
colnames(bozeman16)[colnames(bozeman16)=="Avg_Main_stem_diam_boze_2016"] <- "main_stem_diam"
colnames(bozeman16)[colnames(bozeman16)=="avg_comp_mn_stm_dia_boze_2016"] <- "comp_main_stem_diam"
colnames(bozeman16)[colnames(bozeman16)=="avg_comp_brnch_diam_boze_2016"] <- "comp_branch_diam"
colnames(bozeman16)[colnames(bozeman16)=="avg_branch_diam_boze_2016"] <- "branch_diam"
colnames(bozeman16)[colnames(bozeman16)=="comp_brnch_diam_boze_2016"] <- "comp_branch_diam"
colnames(bozeman16)[colnames(bozeman16)=="avg_root_diam_boze_2016"] <- "root_diam"

##Correlation
#install.packages("psych")
require(psych)
pairs.panels(bozeman16)

#names(bozeman16)

##Drop Columns
bozeman16v2 <- subset(bozeman16, select = -c(Line_name, planting_generation, 
                              Unknown, dpo_boze_2016, plants_harvestedNA_Boze_2016,
                              bif_boze_2016, Yield_boze_2016,
                              white_flow_2016_boze, afila_2016_boze_) )
#names(bozeman16v2)

##Reorder Colums
bozeman16v3 = bozeman16v2[, c(5:6, 1:4, 7:12)]
#names(bozeman16v3)
pairs.panels(bozeman16v3)

##########################
# Bozeman 2014 Dataset  #
#########################

##Load Data (Bozeman 2014)
bozeman14<-bz14
#summary(bozeman14)
#names(bozeman14)

##Relabeling COlumns
colnames(bozeman14)[colnames(bozeman14)=="Prcnt.Lodging"] <- "prcnt_lodging"
colnames(bozeman14)[colnames(bozeman14)=="Germination.2014.."] <- "gemination"
colnames(bozeman14)[colnames(bozeman14)=="branch.numb.2014"] <- "branch_numb"
colnames(bozeman14)[colnames(bozeman14)=="height"] <- "plant_height"
colnames(bozeman14)[colnames(bozeman14)=="length"] <- "plant_length"
colnames(bozeman14)[colnames(bozeman14)=="tendril.length.14.node.2014"] <- "tendril_length_node"
colnames(bozeman14)[colnames(bozeman14)=="tendril.length.2014"] <- "tendril_length"
colnames(bozeman14)[colnames(bozeman14)=="Nodes.1st.flow.2014"] <- "nodes_1st_flow"
colnames(bozeman14)[colnames(bozeman14)=="max.nodes.2014"] <- "max_nodes"
colnames(bozeman14)[colnames(bozeman14)=="internode.length.2014"] <- "internode_length"
colnames(bozeman14)[colnames(bozeman14)=="Total.yield.2014"] <- "total_yield"
colnames(bozeman14)[colnames(bozeman14)=="Avg.Yld.Plant.2014"] <- "avg_total_yield"
colnames(bozeman14)[colnames(bozeman14)=="Main.stm.diameter.2014"] <- "main_stm_diam"
colnames(bozeman14)[colnames(bozeman14)=="Average.compressed.main.stem.thickness.2014"] <- "comp_main_stm"
colnames(bozeman14)[colnames(bozeman14)=="Tiller.diameter.2014"] <- "tiller_diam"
colnames(bozeman14)[colnames(bozeman14)=="compressed.tiller.thickness.2014"] <- "comp_tiller_diam"
colnames(bozeman14)[colnames(bozeman14)=="length.1"] <- "length_1"

##Drop Columns

bozeman14 <- subset(bozeman14, select = -c(DNA.GENERATION, LINE.., Germination.2014NACHECKED, 
   stand.good.1.Y..2.bad.sample..do.not.use.lines.labeled.2, 
   prcnt.lodging.bad.germ.lines.includedNAchecked, flowering.time.2014,
   white.flower..1.is.white, black.hilum.delta.A.NO.MOT, 
   Brown.mottle..rerate.next.year..1.no.mot, np.neo, Late,
   tall.dwf.based.on.grnhouse.data..field.2014, Afila.1.YES.DELTA.A))

#names(bozeman14)

##Reorder Colums
bozeman14 = bozeman14[, c(5:6, 1:4, 7:17)]
#names(bozeman14)

##Plot Correlation
pairs.panels(bozeman14)

##########################
# Bozeman 2015 Dataset  #
#########################

##Load Data (Bozeman 2015)
bozeman15<-bz15
#summary(bozeman15)
#names(bozeman15)

##Relabeling COlumns
colnames(bozeman15)[colnames(bozeman15)=="Yield"] <- "yield"
colnames(bozeman15)[colnames(bozeman15)=="X..GERMINATION.AVG.with.bad.germinating.lines.left.in.and.adjusted.for.seeds.planted"] <- "avg_germination"
colnames(bozeman15)[colnames(bozeman15)=="X..of.branch"] <- "branch_numb"
colnames(bozeman15)[colnames(bozeman15)=="plants.harvested"] <- "plants_harvested"
colnames(bozeman15)[colnames(bozeman15)=="X..Lodging"] <- "prcnt_lodging"
colnames(bozeman15)[colnames(bozeman15)=="Average.height"] <- "plant_height"
colnames(bozeman15)[colnames(bozeman15)=="average.length..Median.2015.40NA45cm."] <- "plant_length"
colnames(bozeman15)[colnames(bozeman15)=="Mat.time"] <- "maturity_time"
colnames(bozeman15)[colnames(bozeman15)=="tendril.width"] <- "tendril_width"
colnames(bozeman15)[colnames(bozeman15)=="tendril.Length"] <- "tendril_length"
colnames(bozeman15)[colnames(bozeman15)=="Nodes.1st.flow"] <- "nodes_1st_flow"
colnames(bozeman15)[colnames(bozeman15)=="max.nodes"] <- "max_nodes"
colnames(bozeman15)[colnames(bozeman15)=="main.stem.DIAm.avg"] <- "main_stem_diam"
colnames(bozeman15)[colnames(bozeman15)=="Main.stem.comp..avg"] <- "comp_main_stem_diam"
colnames(bozeman15)[colnames(bozeman15)=="tiller.Diam.AVG"] <- "tiller_diam"
colnames(bozeman15)[colnames(bozeman15)=="tiller.compressed.avg"] <- "comp_tiller_avg"
colnames(bozeman15)[colnames(bozeman15)=="Root.compressed.avg"] <- "avg_comp_root"
colnames(bozeman15)[colnames(bozeman15)=="avg.main..side.brnch.root"] <- "main_branch_root"

##Drop Columns
bozeman15 <- subset(bozeman15, select = -c(line.., average.lodging.Moccasin.2015, AVERAGE.HEIGHT.Moccasin.2015,
                    X..germ.avg.with.bad.germ.lines.removed.and.adjusted.for.seeds.planted, 
                    X..Lodging.with.bad.germinating.lines.included, runt., white.flow., 
                    black.hilum.LG.6.delta.A.NO.MOT, Brown.mottle..rerate.next.year..1.no.mot, 
                    np.neo, Late.2015, average.length.2015, tall.dwf.based.on.grnhouse.data..field.2015, 
                    AVERAGE.HEIGHT.Moccasin.2015..43NA58., X, Afila.2015, afilaNAdwf.only))

##Reorder Colums
bozeman15 = bozeman15[, c(5:6, 1:4, 7:18)]
#names(bozeman15)

##Plot Correlation
#install.packages("psych")
require(psych)
pairs.panels(bozeman15)

@

\subsection{Moccasin by Year}

<<moc, warning = FALSE, message = FALSE>>=

##########################
# Mocassin 2016 Dataset  #
#########################

##Load Data (Moccasin 2016)
moccasin16<- moc16
#summary(moccasin16)

##Relabel Names
#names(moccasin16)

library(data.table)



##Relabeling COlumns
colnames(moccasin16)[colnames(moccasin16)=="pctg_Lodging_boze_2016"] <- "prcnt_lodging"
colnames(moccasin16)[colnames(moccasin16)=="X..GerminationNAMoccasinNA2016"] <- "prcnt_germination"
colnames(moccasin16)[colnames(moccasin16)=="Tendril.Length.2016"] <- "tendril_length"
colnames(moccasin16)[colnames(moccasin16)=="Avg.branch.number.2016"] <- "branch_numb"
colnames(moccasin16)[colnames(moccasin16)=="Mat.timeNA.MoccasinNA2016"] <- "maturity_time"
colnames(moccasin16)[colnames(moccasin16)=="AVG.length.moc.2016"] <- "plant_length"
colnames(moccasin16)[colnames(moccasin16)=="X.lodging.2016"] <- "prcnt_lodging"
colnames(moccasin16)[colnames(moccasin16)=="Main.stem.diam.avg.2016"] <- "main_stem_diam"
colnames(moccasin16)[colnames(moccasin16)=="avg.branch.diam.2016"] <- "branch_diam"
colnames(moccasin16)[colnames(moccasin16)=="avg.root.diam.2016"] <- "root_diam"

##Drop Columns
#names(moccasin16)
moccasin16 <- subset(moccasin16, select = -c(Line.name,
                     white.flow.moc.2016.checked, afila.2016.moc.checked))
#names(moccasin16)

##Reorder Colums
moccasin16 <- moccasin16[, c(5:6, 1:4, 7:9)]
#names(moccasin16)

##Correlation Plot

library(psych)
pairs.panels(moccasin16)


##########################
# Moccasin 2015 Dataset  #
#########################

##Load Data (Moccasin 2015)
moccasin15<-moc15
#summary(moccasin15)
#names(moccasin15)

##Relabeling Columns
colnames(moccasin15)[colnames(moccasin15)=="Lodging"] <- "prcnt_lodging"
colnames(moccasin15)[colnames(moccasin15)=="stress.minus.equation"] <- "stress_m_eqn"
colnames(moccasin15)[colnames(moccasin15)=="original.stress.equation"] <- "ognl_stress_eqn"
colnames(moccasin15)[colnames(moccasin15)=="stress.minus.equation.with.standard.thickness"] <- "SME_Std_thickn"
colnames(moccasin15)[colnames(moccasin15)=="Height"] <- "plant_height"
colnames(moccasin15)[colnames(moccasin15)=="main.stem.DIAm.3"] <- "main_stem_diam"
colnames(moccasin15)[colnames(moccasin15)=="tiller.Diam.3"] <- "tiller_diam"
colnames(moccasin15)[colnames(moccasin15)=="tiller.compressed.3"] <- "tiller_comp"
colnames(moccasin15)[colnames(moccasin15)=="till.comp.flex"] <- "till_comp_flex"
colnames(moccasin15)[colnames(moccasin15)=="Flex.after.crushing"] <- "flex_crush"
colnames(moccasin15)[colnames(moccasin15)=="Root"] <- "root"

##Drop Columns
#names(moccasin15)

moccasin15 <- subset(moccasin15, select = -c(X))
#names(moccasin15)

##Plot Correlation
pairs.panels(moccasin15)

##########################
# Mocassin Merged Dataset  #
#########################

##Load Data (Moccasin Merged)
setwd("C:/Users/Paul/Documents")
mergedmc<-read.csv("Merged Moccasin.csv",header=T)
#summary(mergedmc)
#names(mergedmc)

##Relabeling COlumns
library(data.table)


colnames(mergedmc)[colnames(mergedmc)=="pctg_Lodging_boze_2016"] <- "prcnt_lodging"
colnames(mergedmc)[colnames(mergedmc)=="X..GerminationNAMoccasinNA2016"] <- "prcnt_germination"
colnames(mergedmc)[colnames(mergedmc)=="Tendril.Length.2016"] <- "tendril_length"
colnames(mergedmc)[colnames(mergedmc)=="Avg.branch.number.2016"] <- "branch_numb"
colnames(mergedmc)[colnames(mergedmc)=="Mat.timeNA.MoccasinNA2016"] <- "maturity_time"
colnames(mergedmc)[colnames(mergedmc)=="AVG.length.moc.2016"] <- "plant_length"
colnames(mergedmc)[colnames(mergedmc)=="X.lodging.2016"] <- "prcnt_lodging"
colnames(mergedmc)[colnames(mergedmc)=="Main.stem.diam.avg.2016"] <- "main_stem_diam"
colnames(mergedmc)[colnames(mergedmc)=="avg.branch.diam.2016"] <- "branch_diam"
colnames(mergedmc)[colnames(mergedmc)=="avg.root.diam.2016"] <- "root_diam"

##Drop Columns
#names(mergedmc)
mergedmc <- subset(mergedmc, select = -c(Line.name,
                                             white.flow.moc.2016.checked, afila.2016.moc.checked
                                         ))
mergedmc <- subset(mergedmc, select = -c(prcnt_germination, tendril_length, branch_numb,
                                         maturity_time, branch_diam))
#names(mergedmc)

##Reorder Colums
mergedmc = mergedmc[, c(2:1, 3:4)]
#names(mergedmc)

##Correlation Plot
pairs.panels(moccasin16)
@





\section{Setting Significance Thresholds}

The pea genetic data include over 600 genetic markers. When a QTL analysis is done, a significance test is done for each marker. Multiple testing problems are quite common in genetic analyses. Jamin mentioned he would like to use LOD for setting a significance threshold. LOD is an abbreviation for the log-odds. LOD is the $log_{10}$ liklihood ratio comparing the null that there is not a QTL to the alternative, that there is.

$Null Model, H_{o}: y_{i} \sim N(\mu, \sigma^2)$ i.e. there is no genetic dependency between the phenotype and the genotype

- Where the maximum likelihood estimates (MLEs) for parameter estimates $\mu = \bar{y}; \sigma^2 = RSS_{o}/n$ are used.

$Alternative Model, H_{a}: y_{i}|g_{i} \sim N(\mu_{g_{i}}, \sigma^2)$

- Where $g_{i}$ = genotype of individual i at the marker (loci); each genotype group has a different mean; $\sigma^2$ = pooled RSS = $RSS_{1}$; again the MLEs. 

LOD = $\frac{n}{2} \times log_{10}(\frac{RSS_{o}}{RSS_{1}})$

LOD is related to the F statistic. LOD = $\frac{n}{2} \times [F({\frac{df}{n-df-1} + 1)]$ and similar to the F statistic, large LOD values are associated with strong evidence for the alternative, that there is a relationship to the genetic loci and the phenotype. Since F statistics help find p-values, and LOD is related to F statistics, by setting genome wide adjusted LOD thresholds, we can easily convert these back to genome wide adjusted p-values. Broman and Sen (2009) provide a method for generating genome wide adjusted LOD thresholds, and the corresponding genome-wide adjusted p-value thresholds in Section 4.3 using the {\texttt QTL} package in R. Future work with Jamin from the Consulting Seminar would benefit from exploring using this simulation method for setting the significance thresholds. Once the data is formatted as a cross object, the method is straightforward.










\end{document}
