colnames(moccasin16)[colnames(moccasin16)=="Mat.timeNA.MoccasinNA2016"] <- "maturity_time"
colnames(moccasin16)[colnames(moccasin16)=="AVG.length.moc.2016"] <- "plant_length"
colnames(moccasin16)[colnames(moccasin16)=="X.lodging.2016"] <- "prcnt_lodging"
colnames(moccasin16)[colnames(moccasin16)=="Main.stem.diam.avg.2016"] <- "main_stem_diam"
colnames(moccasin16)[colnames(moccasin16)=="avg.branch.diam.2016"] <- "branch_diam"
colnames(moccasin16)[colnames(moccasin16)=="avg.root.diam.2016"] <- "root_diam"
##Drop Columns
#names(moccasin16)
moccasin16 <- subset(moccasin16, select = -c(Line.name,
white.flow.moc.2016.checked, afila.2016.moc.checked))
#names(moccasin16)
##Reorder Colums
moccasin16 <- moccasin16[, c(5:6, 1:4, 7:9)]
#names(moccasin16)
##Correlation Plot
library(psych)
#pairs.panels(moccasin16)
correlation.5 <- cor(na.omit(moccasin16[,c(5:6,1:4,7:9)]))
corrplot(correlation.5,tl.cex = .7, method = "number", type = "lower",number.cex = .8,bg = "black")
title("Moccasin 2016")
##########################
# Moccasin 2015 Dataset  #
#########################
##Load Data (Moccasin 2015)
moccasin15<-moc15
#summary(moccasin15)
#names(moccasin15)
##Relabeling Columns
colnames(moccasin15)[colnames(moccasin15)=="Lodging"] <- "prcnt_lodging"
colnames(moccasin15)[colnames(moccasin15)=="stress.minus.equation"] <- "stress_m_eqn"
colnames(moccasin15)[colnames(moccasin15)=="original.stress.equation"] <- "ognl_stress_eqn"
colnames(moccasin15)[colnames(moccasin15)=="stress.minus.equation.with.standard.thickness"] <- "SME_Std_thickn"
colnames(moccasin15)[colnames(moccasin15)=="Height"] <- "plant_height"
colnames(moccasin15)[colnames(moccasin15)=="main.stem.DIAm.3"] <- "main_stem_diam"
colnames(moccasin15)[colnames(moccasin15)=="tiller.Diam.3"] <- "tiller_diam"
colnames(moccasin15)[colnames(moccasin15)=="tiller.compressed.3"] <- "tiller_comp"
colnames(moccasin15)[colnames(moccasin15)=="till.comp.flex"] <- "till_comp_flex"
colnames(moccasin15)[colnames(moccasin15)=="Flex.after.crushing"] <- "flex_crush"
colnames(moccasin15)[colnames(moccasin15)=="Root"] <- "root"
##Drop Columns
#names(moccasin15)
moccasin15 <- subset(moccasin15, select = -c(X))
#names(moccasin15)
##Plot Correlation
#pairs.panels(moccasin15)
correlation.15 <- cor(na.omit(moccasin15[,c(1,2,3,5,6,7,8,9,10,11)]))
corrplot(correlation.15,type = "lower",method ="number",number.cex = .65,bg="black", main = "Moccasin 2015",mar = c(1,1,1,1))
##########################
# Mocassin Merged Dataset  #
#########################
##Load Data (Moccasin Merged)
#setwd("C:/Users/Paul/Documents")
mergedmc<-read.csv("Merged Moccasin.csv",header=T)
#summary(mergedmc)
#names(mergedmc)
##Relabeling COlumns
library(data.table)
colnames(mergedmc)[colnames(mergedmc)=="pctg_Lodging_boze_2016"] <- "prcnt_lodging"
colnames(mergedmc)[colnames(mergedmc)=="X..GerminationNAMoccasinNA2016"] <- "prcnt_germination"
colnames(mergedmc)[colnames(mergedmc)=="Tendril.Length.2016"] <- "tendril_length"
colnames(mergedmc)[colnames(mergedmc)=="Avg.branch.number.2016"] <- "branch_numb"
colnames(mergedmc)[colnames(mergedmc)=="Mat.timeNA.MoccasinNA2016"] <- "maturity_time"
colnames(mergedmc)[colnames(mergedmc)=="AVG.length.moc.2016"] <- "plant_length"
colnames(mergedmc)[colnames(mergedmc)=="X.lodging.2016"] <- "prcnt_lodging"
colnames(mergedmc)[colnames(mergedmc)=="Main.stem.diam.avg.2016"] <- "main_stem_diam"
colnames(mergedmc)[colnames(mergedmc)=="avg.branch.diam.2016"] <- "branch_diam"
colnames(mergedmc)[colnames(mergedmc)=="avg.root.diam.2016"] <- "root_diam"
##Drop Columns
#names(mergedmc)
mergedmc <- subset(mergedmc, select = -c(Line.name,
white.flow.moc.2016.checked, afila.2016.moc.checked
))
mergedmc <- subset(mergedmc, select = -c(prcnt_germination, tendril_length, branch_numb,
maturity_time, branch_diam))
#names(mergedmc)
##Reorder Colums
mergedmc = mergedmc[, c(2:1, 3:4)]
#names(mergedmc)
##Correlation Plot
#pairs.panels(moccasin16,smooth = FALSE, scale = TRUE, density = TRUE, ellipses = FALSE)
correlation.6 <- cor(na.omit(moccasin16[,c(1,2,3,4,5,6,7,8,9)]))
corrplot(correlation.6, type = "lower", method = "number", number.cex = .8, bg ="black", tl.cex = .7, mar = c(1,2,1,2), main = "Moccasin in All Years")
bz13 <- read.csv("JaminB13.csv", header = TRUE)
bz14 <- read.csv("JaminB14.csv", header = TRUE)
bz15 <- read.csv("JaminB15edited.csv", header = TRUE)
bz16 <- read.csv("JaminB16edited.csv", header = TRUE)
moc15 <- read.csv("JaminM15edited.csv", header = TRUE)
moc16 <- read.csv("JaminM16edited.csv", header = TRUE)
#create and add in variables for each site/year combination
bz13$Site <- bz14$Site <- bz15$Site <- bz16$Site <- "Bozeman"
moc15$Site <- moc16$Site <- "Moccasin"
bz13$Year <- 2013
bz14$Year <- 2014
bz15$Year <- moc15$Year <- 2015
bz16$Year <- moc16$Year <- 2016
#Merge into a single dataset
#lodging response
lodging<- c(bz14$Prcnt.Lodging,bz15$X..Lodging,bz16$pctg_Lodging_boze_2016,moc15$Lodging,moc16$X.lodging.2016)
#site year combo as a factor
site <- c(bz14$Site,bz15$Site, bz16$Site,moc15$Site,moc16$Site)
year <- c(bz14$Year, bz15$Year,bz16$Year,moc15$Year,moc16$Year)
siteyear <- as.factor(paste(site,year, sep = ""))
year.site.mat <- matrix(cbind(lodging,site,year,siteyear))
#plots of percent lodging at each site #means
a <- mean(bz14$Prcnt.Lodging, na.rm = TRUE)
b <- mean(bz15$X..Lodging, na.rm = TRUE)
c <-mean(bz16$pctg_Lodging_boze_2016, na.rm = TRUE)
d <- mean(moc15$Lodging, na.rm = TRUE)
e <- mean(moc16$X.lodging.2016, na.rm = TRUE)
#var
a.var <- var(bz14$Prcnt.Lodging, na.rm = TRUE)
b.var <- var(bz15$X..Lodging, na.rm = TRUE)
c.var <-var(bz16$pctg_Lodging_boze_2016, na.rm = TRUE)
d.var <- var(moc15$Lodging, na.rm = TRUE)
e.var <- var(moc16$X.lodging.2016, na.rm = TRUE)
#Bean Plots (Side by Side)
library(beanplot)
beanplot(lodging~siteyear, cex = .8, col = c("gold2","black","red","blue"), main = "Lodging at each site/year combination", ylab = "Percent Lodging", names = c("BZ14","BZ15","BZ16","Moc15","Moc16"),method = "jitter")
#display a better interaction plot with results
intplot<-function (formula = NULL, data = NULL, type = "b", x.cont = FALSE,
legend = TRUE, trace.label = NULL, leg.lab = NULL, fixed = FALSE,
x.leg = NULL, y.leg = NULL, cex.leg = 1, ncol = 1, pch = c(16,
21, 15, 22, 17, 24, c(3:14)), fun = function(x) mean(x,
na.rm = TRUE), ci.fun = function(x) c(fun(x) - se(x),
fun(x) + se(x)), err.width = if (length(levels(as.factor(x.factor))) >
10) 0 else 0.1, err.col = col, err.lty = 1, xlim = NULL,
ylim = NULL, cex = NULL, lwd = NULL, col = "black", cex.axis = 1,
xaxt = "s",main=NULL ,cld=F, cldshift=0.1,cldcol="white", ...)
{
#Modifications by Mark Greenwood, September, 2014 based on interface from compareCatsL by Bryan Hanson, DePauw Univ, Jan 2010 and using the lineplot.CI from the sciplot package
se<-function (x, na.rm = TRUE){ sqrt(var(x, na.rm = na.rm)/length(x[complete.cases(x)]))}
fun <- eval(substitute(fun), envir = data)
ci.fun = eval(substitute(ci.fun),envir=data)
#
response <- eval(parse(text=as.character(formula[[2]])),data)
respname<-formula[[2]]
x.factor <- factor(eval(parse(text=as.character(formula[[3]][3])),data))
xfname<-((formula[[3]][[3]]))
group <- factor(eval(parse(text=as.character(formula[[3]][2])),data))
grpname<-(formula[[3]][[2]])
#
subset = NULL
int.plot <- function(x.factor = x.factor, group = group,
response = response, type = c("l", "p", "b"), legend = legend,
trace.label = deparse(substitute(group)), fixed = FALSE,
xlab = deparse(xfname), ylab = ylabel,
lty = nc:1, pch = NA, xpd = NULL, leg.bg = par("bg"),
leg.bty = "n", xtick = FALSE, xlim = xlim, ylim = ylim,
axes = TRUE, ...) {
ylabel <- paste("Mean of ", deparse(respname), "plus/minus 1 SE")
mainlabel=main
if (is.null(mainlabel))    mainlabel<- paste("Interaction plot of", deparse(respname), "based on",deparse(xfname), "and", deparse(grpname) )
type <- match.arg(type)
cells <- tapply(response, list(x.factor, group), fun)
nr <- nrow(cells)
nc <- ncol(cells)
xvals <- if (x.cont)
as.numeric(levels(as.factor(x.factor)))
else 1:nr
if (is.ordered(x.factor)) {
wn <- getOption("warn")
options(warn = -1)
xnm <- as.numeric(levels(x.factor))
options(warn = wn)
if (!any(is.na(xnm)))
xvals <- xnm
}
xlabs <- rownames(cells)
ylabs <- colnames(cells)
nch <- max(sapply(ylabs, nchar, type = "width"))
if (is.null(xlabs))
xlabs <- as.character(xvals)
if (is.null(ylabs))
ylabs <- as.character(1:nc)
if (is.null(xlim)) {
xlim <- range(xvals)
xleg <- xlim[2] + 0.05 * diff(xlim)
xlim <- xlim + c(-0.2/nr, if (legend & is.null(x.leg) &
is.null(y.leg)) 0.2 + 0.02 * nch else 0.2/nr) *
diff(xlim)
}
else {
xlim
xleg <- xlim[2] - 0.25 * diff(xlim)
}
matplot(xvals, cells, ..., type = type, xlim = xlim,
ylim = ylim, xlab = xlab, ylab = ylab, axes = axes,
xaxt = "n", col = col, lty = lty, lwd = lwd, pch = pch,main=mainlabel)
if (axes && xaxt != "n") {
axisInt <- function(x, main, sub, lwd, bg, log, asp,
...) axis(1, x, ...)
mgp. <- par("mgp")
if (!xtick)
mgp.[2] <- 0
axisInt(1, at = xvals, labels = xlabs, tick = xtick,
mgp = mgp., xaxt = xaxt, ...)
}
ord <- sort.list(cells[nr, ], decreasing = TRUE)
if (legend) {
yrng <- diff(ylim)
yleg <- ylim[2] - 0.1 * yrng
if (!is.null(xpd) || {
xpd. <- par("xpd")
!is.na(xpd.) && !xpd. && (xpd <- TRUE)
}) {
op <- par(xpd = xpd)
on.exit(par(op))
}
text(xleg, ylim[2] - 0.05 * yrng, paste("  ", trace.label),
adj = 0)
if (!fixed) {
ylabs <- ylabs[ord]
lty <- lty[1 + (ord - 1)%%length(lty)]
col <- col[1 + (ord - 1)%%length(col)]
pch <- pch[ord]
}
}
invisible()
return.data <- if (legend)
list(pch = pch, ord = ord, xleg = xleg, yleg = yleg,
ylabs = ylabs, lty = lty, leg.bty = leg.bty,
leg.bg = leg.bg, ord = ord, xvals = xvals, cells = cells)
else list(pch = pch, ord = ord, xvals = xvals)
return(return.data)
}
if (length(group[[1]]) > 1)
group <- factor(interaction(group, lex.order = TRUE))
group <- factor(group)
groups <- list(x.factor, group)
mn.data <- tapply(response, groups, fun)
CI.data <- tapply(response, groups, ci.fun)
plot.limits = c(min(c(unlist(mn.data), unlist(CI.data)),
na.rm = TRUE), max(c(unlist(mn.data), unlist(CI.data)),
na.rm = TRUE))
if (is.null(group)) {
nlevels.x <- if (x.cont)
as.numeric(levels(as.factor(x.factor)))
else 1:nrow(mn.data)
plot(nlevels.x, mn.data, xaxt = "n", type = type, col = col,
pch = NA, cex = cex, cex.axis = cex.axis, lwd = lwd,
xlim = if (is.null(xlim)) {
c(min(nlevels.x) - 0.2, max(nlevels.x) + 0.2)
}
else xlim, ylim = if (is.null(ylim))
plot.limits
else ylim, ...)
if (xaxt != "n")
axis(1, labels = names(mn.data), at = nlevels.x,
cex.axis = cex.axis, ...)
}
else leg.vals <- int.plot(x.factor, group, response, type = type,
xlim = xlim, ylim = if (is.null(ylim))
plot.limits
else ylim, cex.axis = cex.axis, trace.label = trace.label,
pch = NA, legend = legend, ...)
if (is.null(group)) {
nlevels.x <- if (x.cont)
as.numeric(levels(as.factor(x.factor)))
else 1:nrow(mn.data)
CI.seln <- !is.na(mn.data)
CI.plot <- matrix(unlist(CI.data[CI.seln]), nrow = sum(CI.seln),
byrow = TRUE)
arrows(nlevels.x[CI.seln], CI.plot[, 1], nlevels.x[CI.seln],
CI.plot[, 2], angle = 90, col = err.col, length = err.width,
code = 3, lwd = lwd, lty = err.lty)
}
else {
nlevels.y <- ncol(mn.data)
for (i in 1:nlevels.y) {
CI.seln <- !is.na(mn.data)[, i]
CI.plot <- matrix(unlist(CI.data[CI.seln, i]), nrow = sum(CI.seln),
byrow = TRUE)
arrows(leg.vals$xvals[CI.seln], CI.plot[, 1], leg.vals$xvals[CI.seln],
CI.plot[, 2], angle = 90, length = err.width,
col = if (length(err.col) > 1)
err.col[i]
else err.col, lty = if (length(err.lty) > 1)
err.lty[i]
else err.lty, code = 3, lwd = lwd)
}
}
if (type %in% c("p", "b")) {
if (is.null(group)) {
nlevels.x <- if (x.cont)
as.numeric(levels(as.factor(x.factor)))
else 1:nrow(mn.data)
points(nlevels.x, mn.data, pch = pch[1], bg = "white",
cex = cex, col = col)
}
else {
nlevels.y <- dim(mn.data)[2]
for (i in 1:nlevels.y) points(leg.vals$xvals, mn.data[,
i], pch = pch[i], bg = "white", col = if (length(col) >
1)
col[i]
else col, cex = cex)
}
}
if (legend & !is.null(group)) {
legend(x = if (is.null(x.leg))
leg.vals$xleg
else x.leg, y = if (is.null(y.leg))
leg.vals$yleg
else y.leg, legend = if (!is.null(leg.lab))
leg.lab
else {
if (fixed)
levels(as.factor(unlist(group)))
else leg.vals$ylabs
}, pch = if (type %in% c("p", "b")) {
if (!fixed)
pch[leg.vals$ord]
else pch
}, col = if (type %in% c("p", "b")) {
if (!fixed & length(col) > 1)
col[leg.vals$ord]
else col
}, lty = if (type %in% c("l", "b")) {
if (fixed)
leg.vals$lty[order(leg.vals$ord)]
else leg.vals$lty
}, ncol = ncol, bty = leg.vals$leg.bty, bg = leg.vals$leg.bg,
cex = cex.leg)
}
if (cld==T){
#First, flatten two way model and run Tukey HSD
#Create interaction version of two-way ANOVA model:
intvar<-interaction(x.factor,group)
require(multcomp)
cldres<-cld(glht(lm(response~intvar),linfct=mcp(intvar="Tukey")))
ymeans<-predict(lm(response~intvar),newdata=data.frame(intvar=levels(intvar)))
#Then put letters from compact letter display (CLD) on the plot at close to correct locations
if (cldcol=="white"){cldcol<-as.numeric((data.frame(cldres$mcletters$Letters))[,1])+1}
#Need x-location from x.factor
text(x=rep(1:length(levels(x.factor)),length(unique(group))),y=ymeans+cldshift, labels=cldres$mcletters$Letters,col=cldcol,cex=1.3*cex.axis)
}
invisible(list(vals = mn.data, CI = CI.data))
}
intplot(lodging ~ site * year, col = c("red","blue"), lwd = 2)
#Tukey HSD comparisons
diffs <- TukeyHSD(aov(lodging~siteyear))
col <- ifelse(diffs$siteyear[,4]>.05,"blue","red")
par(mar = c(2.5,10,3.5,1))
plot(diffs, col = col, cex.axis = .7, las = 2)
ggplot(datf1_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
guide = guide_legend(title = "") ) +
ggtitle("Genetic Data") +
xlab("Genetic Marker") + ylab("Variety") +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, hjust = 1, size = 0.5),
axis.text.y = element_blank())
summary(datf1_bz16)
str(datf1_bz16)
summary(as.factor(datf1_bz16[555:565,]$value))
155742/257
colnames(gen)
colnames(gen) <- substring(colnames(gen),1,7)
colnames(gen)
unique(datf1_bz16$ind)
unique(datf1_bz16$value)
unique(datf1_bz16$variable)
ggplot(datf1_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
guide = guide_legend(title = "") ) +
ggtitle("Genetic Data") +
xlab("Genetic Marker") + ylab("Variety") +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, hjust = 1, size = 0.5),
axis.text.y = element_blank()) + coord_flip()
colnames(gen)[1]
colnames(gen)[611]
colnames(gen)
length(colnames(gen))
# this data was extracted from the file
#Copy of MapDisto LOD 4, R=.15 with imputed and hets and distorteds remove-map written
# that was sent 112116 from Jamin -- see email
# gen_export is what map disto gave when I exported the data
# it is in an odd format that I don't know how to work with
#setwd("C:/Users/Paul/Documents/seminar_f16/final_report") #sets wd
gen_export <- read.table("datafromdisto_sent112116.txt", fill = TRUE)
str(gen_export)
# gen is what I copied directly from map disto
gen.raw <- read.csv("raw_copied.csv", as.is = TRUE)
gen <- read.csv("gen.csv", as.is = TRUE)
dim(gen)
###################################################################
# below was used to create data set
###################################################################
# make ind x markers
#gen <- t(gen)
#dim(gen)
# make row1 the column names
#colnames(gen) <- c(gen[1,])
# delete first row that was genetic marker identifiers
#gen <- gen[-1,]
#dim(gen)
#str(gen)
#write.csvs(gen, file = "gen.csv")
#gen <- apply(gen, 2, function(t){as.factor(as.character(t))})
#####################################################################
gen[gen == "-"] <- NA
gen <- apply(gen,2,function(t){factor(t,levels = c("A", "B"))})
gen <- data.frame(gen)
# remove blank first column
gen <- gen[,-1]
# converting data to long form for ggplot2 use
gen$ind <- c(seq(1:257))
gen$ind <- as.factor(as.character(gen$ind))
colnames(gen) <- substring(colnames(gen),1,7)
datf1_bz16 <- melt(gen, id.var = 'ind', na.rm = FALSE)
datf1_bz16[is.na(datf1_bz16)] <- "missing"
colnames(gen)
dim(gen)
gen_markers <- gen[,-610]
dim(gen_markers)
marker_miss <- apply(gen_markers,2,function(t){length(which(is.na(t) == TRUE))})
marker_miss
variety_miss <- apply(gen_markers,1,function(t){length(which(is.na(t) == TRUE))})
marker_miss
marker_miss.percent <- marker_miss/dim(gen_markers)[2]
variety_miss.percent <- variety_miss/dim(gen_markers)[1]
marker_miss.percent
mmiss <- data.frame(rbind(marker_miss, marker_miss.percent))
rownames(mmiss) <- c("Count", "Percent")
vmiss <- data.frame(rbind(variety_miss, variety_miss.percent))
rownames(vmiss) <- c("Count", "Percent")
mmiss["Percent",]
mmiss[2,]
which(mmiss[2,] <= 0.25)
mmiss[mmiss25,]
mmiss25 <- which(mmiss[2,] <= 0.25)
mmiss[c(mmiss25),]
mmiss[,c(mmiss25)]
dat25_bz16 <- melt(gen[,c(mmiss25,610)], id.var = 'ind', na.rm = FALSE)
dat25_bz16$value
dat25_bz16$value <- factor(dat25_bz16$value, levels = c("A","B","missing"))
dat25_bz16[is.na(dat25_bz16)] <- "missing"
gen[,c(mmiss50,610)]
mmiss25 <- which(mmiss[2,] <= 0.25)
mmiss30 <- which(0.25 < mmiss[2,] & mmiss[2,]<= 0.30)
mmiss35 <- which(0.30 < mmiss[2,] & mmiss[2,]<= 0.35)
mmiss40 <- which(0.35 < mmiss[2,] & mmiss[2,]<= 0.40)
mmiss45 <- which(0.40 < mmiss[2,] & mmiss[2,]<= 0.45)
mmiss50 <- which(0.45 < mmiss[2,] & mmiss[2,]<= 0.50)
gen[,c(mmiss25,610)]
gen[,c(mmiss30,610)]
ggplot(dat25_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
guide = guide_legend(title = "") ) +
ggtitle("Genetic Data < 25% Missing") +
xlab("Genetic Marker") + ylab("Variety") +
theme(legend.position = "bottom", legend.title = element_text(""),
axis.text.x = element_text(angle = 90, hjust = 1, size = 10),
axis.text.y = element_blank()) + coord_flip()
ggplot(dat30_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
guide = guide_legend(title = "") ) +
ggtitle("Genetic Data < 25 % - 30% Missing") +
xlab("Genetic Marker") + ylab("Variety") +
theme(legend.position = "bottom", legend.title = element_text(""),
axis.text.x = element_text(angle = 90, hjust = 1, size = 1),
axis.text.y = element_text(angle = 0, hjust = 1, size = 1)) + coord_flip()
dat30_bz16 <- melt(gen[,c(mmiss30,610)], id.var = 'ind', na.rm = FALSE)
dat30_bz16$value <- factor(dat30_bz16$value, levels = c("A","B","missing"))
dat30_bz16[is.na(dat30_bz16)] <- "missing"
dat35_bz16 <- melt(gen[,c(mmiss35,610)], id.var = 'ind', na.rm = FALSE)
dat35_bz16$value <- factor(dat35_bz16$value, levels = c("A","B","missing"))
dat35_bz16[is.na(dat35_bz16)] <- "missing"
dat40_bz16 <- melt(gen[,c(mmiss40,610)], id.var = 'ind', na.rm = FALSE)
dat40_bz16$value <- factor(dat40_bz16$value, levels = c("A","B","missing"))
dat40_bz16[is.na(dat40_bz16)] <- "missing"
dat45_bz16 <- melt(gen[,c(mmiss45,610)], id.var = 'ind', na.rm = FALSE)
dat45_bz16$value <- factor(dat45_bz16$value, levels = c("A","B","missing"))
dat45_bz16[is.na(dat45_bz16)] <- "missing"
dat50_bz16 <- melt(gen[,c(mmiss50,610)], id.var = 'ind', na.rm = FALSE)
dat50_bz16$value <- factor(dat50_bz16$value, levels = c("A","B","missing"))
dat50_bz16[is.na(dat50_bz16)] <- "missing"
ggplot(dat30_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
guide = guide_legend(title = "") ) +
ggtitle("Genetic Data < 25 % - 30% Missing") +
xlab("Genetic Marker") + ylab("Variety") +
theme(legend.position = "bottom", legend.title = element_text(""),
axis.text.x = element_text(angle = 90, hjust = 1, size = 1),
axis.text.y = element_text(angle = 0, hjust = 1, size = 1)) + coord_flip()
ggplot(dat25_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
guide = guide_legend(title = "") ) +
ggtitle("Genetic Data < 25% Missing") +
xlab("Genetic Marker") + ylab("Variety") +
theme(legend.position = "bottom", legend.title = element_text(""),
axis.text.x = element_text(angle = 90, hjust = 1, size = 10),
axis.text.y = element_blank()) + coord_flip()
ggplot(dat30_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
guide = guide_legend(title = "") ) +
ggtitle("Genetic Data < 25 % - 30% Missing") +
xlab("Genetic Marker") + ylab("Variety") +
theme(legend.position = "bottom", legend.title = element_text(""),
axis.text.x = element_text(angle = 90, hjust = 1, size = 1),
axis.text.y = element_text(angle = 0, hjust = 1, size = 1)) + coord_flip()
dat25_bz16
ggplot(dat40_bz16, aes(variable, ind)) + geom_tile(aes(fill = value),
colour = "white")  +   scale_fill_manual(values = c("green", "blue","red"),
guide = guide_legend(title = "") ) +
ggtitle("Genetic Data < 35 % - 40% Missing") +
xlab("Genetic Marker") + ylab("Variety") +
theme(legend.position = "bottom", legend.title = element_text(""),
axis.text.x = element_text(angle = 90, hjust = 1, size = 1),
axis.text.y = element_text(angle = 90, hjust = 1, size = 10)) + coord_flip()
install.packages(c("beanplot", "data.table"))
